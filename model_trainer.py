import pickle
import joblib
import numpy
import pandas
import sklearn.ensemble as ek
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split

# Load the dataset from the CSV file
dataset = pandas.read_csv('/home/kali/Desktop/ISP P/Malware-Detection/datasets/dataset_1.csv', sep=',', low_memory=False)

# Data preprocessing
X = dataset.drop(['ID', 'md5', 'legitimate'], axis=1).values
y = dataset['legitimate'].values

# Feature selection using ExtraTreesClassifier
extratrees = ek.ExtraTreesClassifier().fit(X, y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)
nbfeatures = X_new.shape[1]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.2)

# Train the Random Forest model
model = ek.RandomForestClassifier(n_estimators=33)
model.fit(X_train, y_train)

# Evaluate the model on the testing data
accuracy = model.score(X_test, y_test)
print("Accuracy:", (accuracy * 100), '%')

# Calculate and print false positive and false negative rates
y_pred = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_pred)
false_positive_rate = (conf_matrix[0][1] / float(sum(conf_matrix[0]))) * 100
false_negative_rate = (conf_matrix[1][0] / float(sum(conf_matrix[1])) * 100)
print("False positive rate: %f%%" % false_positive_rate)
print("False negative rate: %f%%" % false_negative_rate)

# Save the trained model and selected features
joblib.dump(model, "model/model.pkl")
open('model/features.pkl', 'wb').write(pickle.dumps(features))
